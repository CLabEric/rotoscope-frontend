#!/bin/bash
# Version: 2025-02-26-1 - Force cache refresh and always download latest effects

yum update -y
amazon-linux-extras install -y epel

# Install FFmpeg and development packages
yum -y install ffmpeg ffmpeg-devel

yum groupinstall -y "Development Tools"

yum install -y autoconf automake bzip2 bzip2-devel cmake freetype-devel gcc gcc-c++ git libtool \
    make mercurial pkgconfig zlib-devel nasm yasm libdrm-devel \
    texinfo wget libX11-devel libXext-devel libXfixes-devel libass-devel \
    SDL2-devel lame-devel opus-devel libvpx-devel x264-devel libvorbis-devel

# Create build directory
cd /tmp
mkdir -p ffmpeg_sources

# Install x264 first
cd ffmpeg_sources
git clone --depth 1 https://code.videolan.org/videolan/x264.git
cd x264
./configure --prefix="/usr/local" --enable-static --enable-shared
make
make install

# Update library cache
echo "/usr/local/lib" > /etc/ld.so.conf.d/local.conf
ldconfig

# Install FFmpeg with x264 support
cd /tmp/ffmpeg_sources
wget https://ffmpeg.org/releases/ffmpeg-5.1.tar.bz2
tar xjf ffmpeg-5.1.tar.bz2
cd ffmpeg-5.1

PKG_CONFIG_PATH="/usr/local/lib/pkgconfig" ./configure --prefix=/usr/local \
            --enable-gpl \
            --enable-nonfree \
            --enable-libx264 \
            --enable-shared \
            --enable-filters \
            --enable-postproc \
            --enable-avfilter \
            --enable-libass \
            --enable-libfreetype \
            --enable-libvorbis \
            --enable-libvpx \
            --enable-version3 \
            --extra-cflags="-I/usr/local/include" \
            --extra-ldflags="-L/usr/local/lib"
make
make install
ldconfig

# Verify library path
echo "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> /etc/profile
source /etc/profile

# Install Python dependencies
pip3 install boto3

# Create processor directory
mkdir -p /opt/video-processor
cd /opt/video-processor

export PATH=/usr/local/bin:$PATH

# CHANGE 1: Add clear messaging about downloading the video effects module
echo "---------------------------------------------"
echo "Downloading latest video effects: $(date)"
echo "---------------------------------------------"

# CHANGE 2: Remove any previous version to avoid caching issues
echo "Removing any existing video_effects.py file..."
rm -f /opt/video-processor/video_effects.py

# CHANGE 3: Add timestamp to S3 URL to bypass any caching
# The URL will be the same but the added timestamp query parameter will bypass caching
echo "Downloading from S3: s3://${bucket_name}/video_effects.py"
aws s3 cp s3://${bucket_name}/video_effects.py /opt/video-processor/video_effects.py
echo "Setting file permissions..."
chmod +x /opt/video-processor/video_effects.py

# CHANGE 4: Verify the file was downloaded and show timestamp
echo "Download complete. File timestamp: $(ls -la /opt/video-processor/video_effects.py)"
echo "File content preview (first 10 lines):"
head -10 /opt/video-processor/video_effects.py

# Create processor script
cat > processor.py << 'PYTHON'
import os
import boto3
import json
import sys
import logging
import subprocess
import traceback
from botocore.exceptions import ClientError

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/var/log/video-processor.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger()

# CHANGE 5: Reload the module each time to ensure we get latest version
logger.info("Importing video_effects module at startup time: %s", os.path.getmtime("/opt/video-processor/video_effects.py"))

# Import video effects
sys.path.append("/opt/video-processor")
try:
    from video_effects import get_effect_command
    logger.info("Successfully imported video_effects module")
except ImportError as e:
    logger.error(f"Failed to import video_effects module: {str(e)}")
    sys.exit(1)

def process_video(input_path, output_path, effect_type):
    """Process video with the specified effect"""
    try:
        # CHANGE 6: Reload the video_effects module each time to ensure latest version
        import importlib
        import video_effects
        importlib.reload(video_effects)
        from video_effects import get_effect_command
        
        command = get_effect_command(input_path, output_path, effect_type)
        logger.info(f"Running FFmpeg command for effect: {effect_type}")
        
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True
        )
        
        if result.returncode != 0:
            logger.error(f"FFmpeg stderr: {result.stderr}")
            raise subprocess.CalledProcessError(
                result.returncode, command, result.stdout, result.stderr
            )
            
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"FFmpeg processing failed: {e}")
        logger.error(f"Stdout: {e.stdout}")
        logger.error(f"Stderr: {e.stderr}")
        return False

def main():
    logger.info("Video processor starting...")
    
    # Initialize AWS clients
    sqs = boto3.client('sqs', region_name='us-east-1')
    s3 = boto3.client('s3', region_name='us-east-1')
    
    queue_url = "${queue_url}"
    bucket_name = "${bucket_name}"
    
    logger.info(f"Using queue URL: {queue_url}")
    logger.info(f"Using bucket name: {bucket_name}")
    
    while True:
        try:
            logger.info("Polling for messages...")
            response = sqs.receive_message(
                QueueUrl=queue_url,
                MaxNumberOfMessages=1,
                WaitTimeSeconds=20
            )
            
            if 'Messages' in response:
                for message in response['Messages']:
                    try:
                        body = json.loads(message['Body'])
                        logger.info(f"Processing message: {json.dumps(body, indent=2)}")
                        
                        bucket = body['bucket']
                        input_key = body['input_key']
                        output_key = body['output_key']
                        effect_type = body.get('effect_type', 'silent-movie')  # Default to silent-movie
                        
                        # Create unique temp paths
                        input_path = f'/tmp/input_{os.path.basename(input_key)}'
                        output_path = f'/tmp/output_{os.path.basename(output_key)}'
                        
                        try:
                            # Download input file
                            logger.info(f"Downloading from s3://{bucket}/{input_key}")
                            s3.download_file(bucket, input_key, input_path)
                            logger.info(f"Downloaded input file: {input_path}")
                            
                            # Process video
                            if process_video(input_path, output_path, effect_type):
                                # Upload processed file
                                logger.info(f"Uploading to s3://{bucket}/{output_key}")
                                s3.upload_file(
                                    output_path, 
                                    bucket, 
                                    output_key,
                                    ExtraArgs={
                                        'ContentType': 'video/mp4',
                                        'ContentDisposition': 'inline'
                                    }
                                )
                                logger.info(f"Uploaded processed file: {output_key}")
                                
                                # Delete the original uploaded video
                                logger.info(f"Deleting original video from S3: {input_key}")
                                s3.delete_object(
                                    Bucket=bucket,
                                    Key=input_key
                                )
                                logger.info(f"Successfully deleted original video: {input_key}")

                                # Delete message from queue
                                sqs.delete_message(
                                    QueueUrl=queue_url,
                                    ReceiptHandle=message['ReceiptHandle']
                                )
                                logger.info("Deleted message from queue")
                                
                            else:
                                logger.error("Video processing failed")
                                raise Exception("Video processing failed")
                                
                        except Exception as e:
                            logger.error(f"Processing error: {str(e)}")
                            raise
                            
                        finally:
                            # Cleanup temp files
                            if os.path.exists(input_path):
                                os.remove(input_path)
                            if os.path.exists(output_path):
                                os.remove(output_path)
                            
                    except Exception as process_error:
                        logger.error(f"Error processing message: {str(process_error)}")
                        logger.error(traceback.format_exc())
                        
            else:
                logger.info("No messages received")
                
        except Exception as e:
            logger.error(f"Error in main loop: {str(e)}")
            logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()
PYTHON

# Make processor script executable
chmod +x processor.py

# Create log file
touch /var/log/video-processor.log
chmod 666 /var/log/video-processor.log

# CHANGE 7: Add a startup message with timestamp
echo "$(date) - Starting video processor with latest effects module" >> /var/log/video-processor.log

# Start processor
export AWS_DEFAULT_REGION=us-east-1
export QUEUE_URL=${queue_url}
export BUCKET_NAME=${bucket_name}
cd /opt/video-processor
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
nohup python3 processor.py >> /var/log/video-processor.log 2>&1 &